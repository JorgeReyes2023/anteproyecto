# ===== DOCKER COMPOSE PARA SISTEMA IOT COMPLETO =====

services:
  # ===== BASE DE DATOS PostgreSQL =====
  postgres:
    image: postgres:15-alpine
    container_name: nodalis_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - nodalis_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-nodalis_iot}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===== CACHE REDIS =====
  redis:
    image: redis:7-alpine
    container_name: nodalis_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"  # Port externe 6380, interne 6379
    networks:
      - nodalis_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ===== BACKEND NODE.JS =====
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: nodalis_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: "${DATABASE_URL}"
      JWT_SECRET: ${JWT_SECRET}
      REDIS_URL: ${REDIS_URL}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      MQTTSERVER: ${MQTTSERVER:-mqtt://mosquitto:1883}
      PORT: 3000
    volumes:
      - backend_logs:/app/logs
    ports:
      - "3000:3000"
    networks:
      - nodalis_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        npx prisma migrate deploy &&
        npx prisma db seed &&
        npm start
      "

  # ===== FRONTEND ANGULAR =====
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: nodalis_frontend
    restart: unless-stopped
    environment:
      API_URL: http://backend:3000
      MQTT_WS_URL: ws://mosquitto:9001
    ports:
      - "80:80"
    networks:
      - nodalis_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== SERVEUR MQTT (Process separado para el backend) =====
  mqtt_processor:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: nodalis_mqtt_processor
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-nodalis_iot}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      MQTTSERVER: ${MQTTSERVER:-mqtt://mosquitto:1883}
      MQTTPORT: ${MQTTPORT:-1883}
    volumes:
      - mqtt_logs:/app/logs
    networks:
      - nodalis_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["npm", "run", "mqtt"]
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep mqtt || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

# ===== VOLUMES PERSISTENTES =====
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mosquitto_data:
    driver: local
  mosquitto_logs:
    driver: local
  backend_logs:
    driver: local
  mqtt_logs:
    driver: local

# ===== REDES =====
networks:
  nodalis_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16