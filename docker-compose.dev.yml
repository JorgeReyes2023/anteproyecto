# ===== DOCKER COMPOSE PARA DESARROLLO =====
# Usar con: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

services:
  # ===== BACKEND EN MODO DESARROLLO =====
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: dev
    env_file:
      - .env
    environment:
      NODE_ENV: development
      # Override para Docker
      DB_HOST: postgres
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_URL: ${REDIS_URL}
      MQTTSERVER: ${MQTTSERVER}
      MQTTPORT: ${MQTTPORT}
      MQTT_USERNAME: ${MQTT_USERNAME}
      PASSWORD_MQ: ${PASSWORD_MQ}
    volumes:
      # Montar código fuente para hot-reload
      - ./backend/src:/app/src:ro
      - ./backend/package.json:/app/package.json:ro
      - ./backend/prisma:/app/prisma:ro
      # Excluir node_modules del host
      - /app/node_modules
    networks:
      - nodalis_network
    depends_on:
      - postgres
      - redis
    command: >
      sh -c "
        echo 'DB...' &&
        npx prisma db push &&
        echo 'Base de datos actualizada.' &&
        npm run seed &&
        echo 'Lanzando backend...' &&
        exec npm run dev
      "
    ports:
      - "3000:3000"  # Puerto backend

  # ===== FRONTEND EN MODO DESARROLLO =====
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: dev
    environment:
      NODE_ENV: development
    volumes:
      # Montar código fuente para hot-reload
      - ./frontend/src:/app/src:ro
      - ./frontend/angular.json:/app/angular.json:ro
      - ./frontend/package.json:/app/package.json:ro
      - ./frontend/tsconfig.json:/app/tsconfig.json:ro
      # Excluir node_modules del host
      - /app/node_modules
      - /app/dist
    ports:
      - "4200:4200"  # Puerto del servidor de desarrollo Angular
    command: ["npm", "start", "--", "--host", "0.0.0.0", "--poll", "2000"]
    networks:
      - nodalis_network

  # ===== PROCESADOR MQTT EN MODO DESARROLLO =====
  mqtt_processor:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: dev
    environment:
      NODE_ENV: development
      # Override para Docker
      DB_HOST: postgres  
      DATABASE_URL: "${DATABASE_URL}"
      REDIS_URL: ${REDIS_URL}
      MQTTSERVER: ${MQTTSERVER}
      MQTTPORT: ${MQTTPORT}
      CLIENTID: ${CLIENTID}
      MQTT_USERNAME: ${MQTT_USERNAME}
      PASSWORD_MQ: ${PASSWORD_MQ}
    volumes:
      - ./backend/src:/app/src:ro
      - ./backend/package.json:/app/package.json:ro
      - /app/node_modules
    depends_on:
      - postgres
      - redis
      - backend
    command: ["npm", "run", "mqtt"]
    networks:
      - nodalis_network

# ===== VOLUMENES ADICIONALES PARA DESARROLLO =====
volumes:
  # Caché para node_modules
  backend_node_modules:
  frontend_node_modules:

  # ===== REDES =====
networks:
  nodalis_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16