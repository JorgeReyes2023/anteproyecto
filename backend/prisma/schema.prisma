generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIVE
  INACTIVE
  MAINTENANCE
  ERROR
}

model alerts {
  id         Int       @id @default(autoincrement())
  message    String
  level      String?   @db.VarChar(50)
  sensor_id  Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  sensors    sensors?  @relation(fields: [sensor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model companies {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(255)
  address    String?
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  projects   projects[]
  users      users[]
}

model nodes {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  location   String?   @db.VarChar(255)
  project_id Int?
  status Status @default(ACTIVE)  
  created_at DateTime? @default(now()) @db.Timestamp(6)
  projects   projects? @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sensors    sensors[]
}

model projects {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  description String?
  company_id  Int?
  created_at  DateTime?  @default(now()) @db.Timestamp(6)
  nodes       nodes[]
  companies   companies? @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sensor_reading_types {
  id          Int                    @id @default(autoincrement())
  name        String                 @unique @db.VarChar(50)
  unit        String                 @db.VarChar(20)
  description String?                @db.VarChar(255)
  readings    sensor_readings[]
  thresholds  thresholds[]
  supported_by sensor_supported_types[]
}

model sensor_readings {
  id           Int                   @id @default(autoincrement())
  sensor_id    Int
  type_id      Int
  value        Float
  timestamp    DateTime              @default(now())

  sensors              sensors              @relation(fields: [sensor_id], references: [id])
  sensor_reading_types sensor_reading_types @relation(fields: [type_id], references: [id])

  @@index([sensor_id, type_id, timestamp])
}

model sensors {
  id              Int                    @id @default(autoincrement())
  name            String                 @unique @db.VarChar(255)
  node_id         Int?
  status          Status                 @default(ACTIVE)
  created_at      DateTime?              @default(now()) @db.Timestamp(6)
  alerts          alerts[]
  sensor_readings sensor_readings[]
  thresholds      thresholds[]
  nodes           nodes?                 @relation(fields: [node_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  supported_types sensor_supported_types[]
}

model thresholds {
  id        Int      @id @default(autoincrement())
  sensor_id Int
  type_id   Int
  min_value Float?
  max_value Float?

  sensors   sensors?              @relation(fields: [sensor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sensor_reading_types sensor_reading_types @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}


model user_roles {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(50)
  description String?
  users       users[]
}

model users {
  id           Int         @id @default(autoincrement())
  name         String      @db.VarChar(255)
  email        String      @unique @db.VarChar(255)
  password     String      @db.VarChar(255)
  user_role_id Int?
  company_id   Int?
  created_at   DateTime?   @default(now()) @db.Timestamp(6)
  companies    companies?  @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_roles   user_roles? @relation(fields: [user_role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sensor_supported_types {
  sensor_id Int
  type_id   Int

  sensor    sensors              @relation(fields: [sensor_id], references: [id], onDelete: Cascade)
  type      sensor_reading_types @relation(fields: [type_id], references: [id], onDelete: Cascade)

  @@id([sensor_id, type_id]) // clave primaria compuesta
}
