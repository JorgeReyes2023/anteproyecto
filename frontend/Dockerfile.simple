# ===== DOCKERFILE SIMPLIFIÃ‰ POUR FRONTEND ANGULAR =====

# Stage 1: Build Angular application (Static)
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --silent

# Copy source code
COPY . .

# Build Angular application for production (static)
RUN npm run build -- --configuration=production --output-path=dist

# Stage 2: Serve with Nginx
FROM nginx:alpine AS production

# Install curl for health checks
RUN apk add --no-cache curl

# Copy custom Nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Copy built Angular application
COPY --from=builder /app/dist /usr/share/nginx/html

# Create non-root user
RUN addgroup -g 1001 -S nginx && \
  adduser -S nginxuser -u 1001 -G nginx

# Fix permissions
RUN chown -R nginxuser:nginx /usr/share/nginx/html && \
  chown -R nginxuser:nginx /var/cache/nginx && \
  chown -R nginxuser:nginx /var/log/nginx && \
  chown -R nginxuser:nginx /etc/nginx/conf.d

RUN touch /var/run/nginx.pid && \
  chown -R nginxuser:nginx /var/run/nginx.pid

USER nginxuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/ || exit 1

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]

# Stage 3: Development build with hot reload
FROM node:18-alpine AS dev

WORKDIR /app

# Install dependencies
COPY package*.json ./
RUN npm ci

# Copy source code
COPY . .

EXPOSE 4200

# Start development server
CMD ["npm", "start", "--", "--host", "0.0.0.0", "--poll", "2000"]